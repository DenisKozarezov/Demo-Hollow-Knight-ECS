//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PlayerEnteredBossZoneEventListenerComponent playerEnteredBossZoneEventListener { get { return (PlayerEnteredBossZoneEventListenerComponent)GetComponent(GameComponentsLookup.PlayerEnteredBossZoneEventListener); } }
    public bool hasPlayerEnteredBossZoneEventListener { get { return HasComponent(GameComponentsLookup.PlayerEnteredBossZoneEventListener); } }

    public void AddPlayerEnteredBossZoneEventListener(System.Collections.Generic.List<IPlayerEnteredBossZoneEventListener> newValue) {
        var index = GameComponentsLookup.PlayerEnteredBossZoneEventListener;
        var component = (PlayerEnteredBossZoneEventListenerComponent)CreateComponent(index, typeof(PlayerEnteredBossZoneEventListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePlayerEnteredBossZoneEventListener(System.Collections.Generic.List<IPlayerEnteredBossZoneEventListener> newValue) {
        var index = GameComponentsLookup.PlayerEnteredBossZoneEventListener;
        var component = (PlayerEnteredBossZoneEventListenerComponent)CreateComponent(index, typeof(PlayerEnteredBossZoneEventListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerEnteredBossZoneEventListener() {
        RemoveComponent(GameComponentsLookup.PlayerEnteredBossZoneEventListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlayerEnteredBossZoneEventListener;

    public static Entitas.IMatcher<GameEntity> PlayerEnteredBossZoneEventListener {
        get {
            if (_matcherPlayerEnteredBossZoneEventListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlayerEnteredBossZoneEventListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlayerEnteredBossZoneEventListener = matcher;
            }

            return _matcherPlayerEnteredBossZoneEventListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddPlayerEnteredBossZoneEventListener(IPlayerEnteredBossZoneEventListener value) {
        var listeners = hasPlayerEnteredBossZoneEventListener
            ? playerEnteredBossZoneEventListener.value
            : new System.Collections.Generic.List<IPlayerEnteredBossZoneEventListener>();
        listeners.Add(value);
        ReplacePlayerEnteredBossZoneEventListener(listeners);
    }

    public void RemovePlayerEnteredBossZoneEventListener(IPlayerEnteredBossZoneEventListener value, bool removeComponentWhenEmpty = true) {
        var listeners = playerEnteredBossZoneEventListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemovePlayerEnteredBossZoneEventListener();
        } else {
            ReplacePlayerEnteredBossZoneEventListener(listeners);
        }
    }
}
