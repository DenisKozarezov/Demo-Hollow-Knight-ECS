//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PlayerRecievedDamageEventListenerComponent playerRecievedDamageEventListener { get { return (PlayerRecievedDamageEventListenerComponent)GetComponent(GameComponentsLookup.PlayerRecievedDamageEventListener); } }
    public bool hasPlayerRecievedDamageEventListener { get { return HasComponent(GameComponentsLookup.PlayerRecievedDamageEventListener); } }

    public void AddPlayerRecievedDamageEventListener(System.Collections.Generic.List<IPlayerRecievedDamageEventListener> newValue) {
        var index = GameComponentsLookup.PlayerRecievedDamageEventListener;
        var component = (PlayerRecievedDamageEventListenerComponent)CreateComponent(index, typeof(PlayerRecievedDamageEventListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePlayerRecievedDamageEventListener(System.Collections.Generic.List<IPlayerRecievedDamageEventListener> newValue) {
        var index = GameComponentsLookup.PlayerRecievedDamageEventListener;
        var component = (PlayerRecievedDamageEventListenerComponent)CreateComponent(index, typeof(PlayerRecievedDamageEventListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerRecievedDamageEventListener() {
        RemoveComponent(GameComponentsLookup.PlayerRecievedDamageEventListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlayerRecievedDamageEventListener;

    public static Entitas.IMatcher<GameEntity> PlayerRecievedDamageEventListener {
        get {
            if (_matcherPlayerRecievedDamageEventListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlayerRecievedDamageEventListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlayerRecievedDamageEventListener = matcher;
            }

            return _matcherPlayerRecievedDamageEventListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddPlayerRecievedDamageEventListener(IPlayerRecievedDamageEventListener value) {
        var listeners = hasPlayerRecievedDamageEventListener
            ? playerRecievedDamageEventListener.value
            : new System.Collections.Generic.List<IPlayerRecievedDamageEventListener>();
        listeners.Add(value);
        ReplacePlayerRecievedDamageEventListener(listeners);
    }

    public void RemovePlayerRecievedDamageEventListener(IPlayerRecievedDamageEventListener value, bool removeComponentWhenEmpty = true) {
        var listeners = playerRecievedDamageEventListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemovePlayerRecievedDamageEventListener();
        } else {
            ReplacePlayerRecievedDamageEventListener(listeners);
        }
    }
}
