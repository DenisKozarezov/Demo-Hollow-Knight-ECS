//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public AnyPlayerTalkingWithNPCEventListenerComponent anyPlayerTalkingWithNPCEventListener { get { return (AnyPlayerTalkingWithNPCEventListenerComponent)GetComponent(GameComponentsLookup.AnyPlayerTalkingWithNPCEventListener); } }
    public bool hasAnyPlayerTalkingWithNPCEventListener { get { return HasComponent(GameComponentsLookup.AnyPlayerTalkingWithNPCEventListener); } }

    public void AddAnyPlayerTalkingWithNPCEventListener(System.Collections.Generic.List<IAnyPlayerTalkingWithNPCEventListener> newValue) {
        var index = GameComponentsLookup.AnyPlayerTalkingWithNPCEventListener;
        var component = (AnyPlayerTalkingWithNPCEventListenerComponent)CreateComponent(index, typeof(AnyPlayerTalkingWithNPCEventListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceAnyPlayerTalkingWithNPCEventListener(System.Collections.Generic.List<IAnyPlayerTalkingWithNPCEventListener> newValue) {
        var index = GameComponentsLookup.AnyPlayerTalkingWithNPCEventListener;
        var component = (AnyPlayerTalkingWithNPCEventListenerComponent)CreateComponent(index, typeof(AnyPlayerTalkingWithNPCEventListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveAnyPlayerTalkingWithNPCEventListener() {
        RemoveComponent(GameComponentsLookup.AnyPlayerTalkingWithNPCEventListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAnyPlayerTalkingWithNPCEventListener;

    public static Entitas.IMatcher<GameEntity> AnyPlayerTalkingWithNPCEventListener {
        get {
            if (_matcherAnyPlayerTalkingWithNPCEventListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AnyPlayerTalkingWithNPCEventListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAnyPlayerTalkingWithNPCEventListener = matcher;
            }

            return _matcherAnyPlayerTalkingWithNPCEventListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddAnyPlayerTalkingWithNPCEventListener(IAnyPlayerTalkingWithNPCEventListener value) {
        var listeners = hasAnyPlayerTalkingWithNPCEventListener
            ? anyPlayerTalkingWithNPCEventListener.value
            : new System.Collections.Generic.List<IAnyPlayerTalkingWithNPCEventListener>();
        listeners.Add(value);
        ReplaceAnyPlayerTalkingWithNPCEventListener(listeners);
    }

    public void RemoveAnyPlayerTalkingWithNPCEventListener(IAnyPlayerTalkingWithNPCEventListener value, bool removeComponentWhenEmpty = true) {
        var listeners = anyPlayerTalkingWithNPCEventListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveAnyPlayerTalkingWithNPCEventListener();
        } else {
            ReplaceAnyPlayerTalkingWithNPCEventListener(listeners);
        }
    }
}
