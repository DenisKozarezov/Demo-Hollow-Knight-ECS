//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PlayerTalkingWithNPCEventListenerComponent playerTalkingWithNPCEventListener { get { return (PlayerTalkingWithNPCEventListenerComponent)GetComponent(GameComponentsLookup.PlayerTalkingWithNPCEventListener); } }
    public bool hasPlayerTalkingWithNPCEventListener { get { return HasComponent(GameComponentsLookup.PlayerTalkingWithNPCEventListener); } }

    public void AddPlayerTalkingWithNPCEventListener(System.Collections.Generic.List<IPlayerTalkingWithNPCEventListener> newValue) {
        var index = GameComponentsLookup.PlayerTalkingWithNPCEventListener;
        var component = (PlayerTalkingWithNPCEventListenerComponent)CreateComponent(index, typeof(PlayerTalkingWithNPCEventListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePlayerTalkingWithNPCEventListener(System.Collections.Generic.List<IPlayerTalkingWithNPCEventListener> newValue) {
        var index = GameComponentsLookup.PlayerTalkingWithNPCEventListener;
        var component = (PlayerTalkingWithNPCEventListenerComponent)CreateComponent(index, typeof(PlayerTalkingWithNPCEventListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePlayerTalkingWithNPCEventListener() {
        RemoveComponent(GameComponentsLookup.PlayerTalkingWithNPCEventListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPlayerTalkingWithNPCEventListener;

    public static Entitas.IMatcher<GameEntity> PlayerTalkingWithNPCEventListener {
        get {
            if (_matcherPlayerTalkingWithNPCEventListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PlayerTalkingWithNPCEventListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPlayerTalkingWithNPCEventListener = matcher;
            }

            return _matcherPlayerTalkingWithNPCEventListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddPlayerTalkingWithNPCEventListener(IPlayerTalkingWithNPCEventListener value) {
        var listeners = hasPlayerTalkingWithNPCEventListener
            ? playerTalkingWithNPCEventListener.value
            : new System.Collections.Generic.List<IPlayerTalkingWithNPCEventListener>();
        listeners.Add(value);
        ReplacePlayerTalkingWithNPCEventListener(listeners);
    }

    public void RemovePlayerTalkingWithNPCEventListener(IPlayerTalkingWithNPCEventListener value, bool removeComponentWhenEmpty = true) {
        var listeners = playerTalkingWithNPCEventListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemovePlayerTalkingWithNPCEventListener();
        } else {
            ReplacePlayerTalkingWithNPCEventListener(listeners);
        }
    }
}
