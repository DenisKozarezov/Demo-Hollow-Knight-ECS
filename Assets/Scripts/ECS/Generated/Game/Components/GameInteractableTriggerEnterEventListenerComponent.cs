//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public InteractableTriggerEnterEventListenerComponent interactableTriggerEnterEventListener { get { return (InteractableTriggerEnterEventListenerComponent)GetComponent(GameComponentsLookup.InteractableTriggerEnterEventListener); } }
    public bool hasInteractableTriggerEnterEventListener { get { return HasComponent(GameComponentsLookup.InteractableTriggerEnterEventListener); } }

    public void AddInteractableTriggerEnterEventListener(System.Collections.Generic.List<IInteractableTriggerEnterEventListener> newValue) {
        var index = GameComponentsLookup.InteractableTriggerEnterEventListener;
        var component = (InteractableTriggerEnterEventListenerComponent)CreateComponent(index, typeof(InteractableTriggerEnterEventListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceInteractableTriggerEnterEventListener(System.Collections.Generic.List<IInteractableTriggerEnterEventListener> newValue) {
        var index = GameComponentsLookup.InteractableTriggerEnterEventListener;
        var component = (InteractableTriggerEnterEventListenerComponent)CreateComponent(index, typeof(InteractableTriggerEnterEventListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveInteractableTriggerEnterEventListener() {
        RemoveComponent(GameComponentsLookup.InteractableTriggerEnterEventListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInteractableTriggerEnterEventListener;

    public static Entitas.IMatcher<GameEntity> InteractableTriggerEnterEventListener {
        get {
            if (_matcherInteractableTriggerEnterEventListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.InteractableTriggerEnterEventListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInteractableTriggerEnterEventListener = matcher;
            }

            return _matcherInteractableTriggerEnterEventListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddInteractableTriggerEnterEventListener(IInteractableTriggerEnterEventListener value) {
        var listeners = hasInteractableTriggerEnterEventListener
            ? interactableTriggerEnterEventListener.value
            : new System.Collections.Generic.List<IInteractableTriggerEnterEventListener>();
        listeners.Add(value);
        ReplaceInteractableTriggerEnterEventListener(listeners);
    }

    public void RemoveInteractableTriggerEnterEventListener(IInteractableTriggerEnterEventListener value, bool removeComponentWhenEmpty = true) {
        var listeners = interactableTriggerEnterEventListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveInteractableTriggerEnterEventListener();
        } else {
            ReplaceInteractableTriggerEnterEventListener(listeners);
        }
    }
}
