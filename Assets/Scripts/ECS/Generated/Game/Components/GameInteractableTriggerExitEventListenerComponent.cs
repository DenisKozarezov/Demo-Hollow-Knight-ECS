//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public InteractableTriggerExitEventListenerComponent interactableTriggerExitEventListener { get { return (InteractableTriggerExitEventListenerComponent)GetComponent(GameComponentsLookup.InteractableTriggerExitEventListener); } }
    public bool hasInteractableTriggerExitEventListener { get { return HasComponent(GameComponentsLookup.InteractableTriggerExitEventListener); } }

    public void AddInteractableTriggerExitEventListener(System.Collections.Generic.List<IInteractableTriggerExitEventListener> newValue) {
        var index = GameComponentsLookup.InteractableTriggerExitEventListener;
        var component = (InteractableTriggerExitEventListenerComponent)CreateComponent(index, typeof(InteractableTriggerExitEventListenerComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceInteractableTriggerExitEventListener(System.Collections.Generic.List<IInteractableTriggerExitEventListener> newValue) {
        var index = GameComponentsLookup.InteractableTriggerExitEventListener;
        var component = (InteractableTriggerExitEventListenerComponent)CreateComponent(index, typeof(InteractableTriggerExitEventListenerComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveInteractableTriggerExitEventListener() {
        RemoveComponent(GameComponentsLookup.InteractableTriggerExitEventListener);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherInteractableTriggerExitEventListener;

    public static Entitas.IMatcher<GameEntity> InteractableTriggerExitEventListener {
        get {
            if (_matcherInteractableTriggerExitEventListener == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.InteractableTriggerExitEventListener);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherInteractableTriggerExitEventListener = matcher;
            }

            return _matcherInteractableTriggerExitEventListener;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.EventEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public void AddInteractableTriggerExitEventListener(IInteractableTriggerExitEventListener value) {
        var listeners = hasInteractableTriggerExitEventListener
            ? interactableTriggerExitEventListener.value
            : new System.Collections.Generic.List<IInteractableTriggerExitEventListener>();
        listeners.Add(value);
        ReplaceInteractableTriggerExitEventListener(listeners);
    }

    public void RemoveInteractableTriggerExitEventListener(IInteractableTriggerExitEventListener value, bool removeComponentWhenEmpty = true) {
        var listeners = interactableTriggerExitEventListener.value;
        listeners.Remove(value);
        if (removeComponentWhenEmpty && listeners.Count == 0) {
            RemoveInteractableTriggerExitEventListener();
        } else {
            ReplaceInteractableTriggerExitEventListener(listeners);
        }
    }
}
