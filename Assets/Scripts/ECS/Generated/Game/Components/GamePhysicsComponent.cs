//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity physicsEntity { get { return GetGroup(GameMatcher.Physics).GetSingleEntity(); } }
    public Core.ECS.Components.Physics physics { get { return physicsEntity.physics; } }
    public bool hasPhysics { get { return physicsEntity != null; } }

    public GameEntity SetPhysics(Core.Services.IPhysicsService newValue) {
        if (hasPhysics) {
            throw new Entitas.EntitasException("Could not set Physics!\n" + this + " already has an entity with Core.ECS.Components.Physics!",
                "You should check if the context already has a physicsEntity before setting it or use context.ReplacePhysics().");
        }
        var entity = CreateEntity();
        entity.AddPhysics(newValue);
        return entity;
    }

    public void ReplacePhysics(Core.Services.IPhysicsService newValue) {
        var entity = physicsEntity;
        if (entity == null) {
            entity = SetPhysics(newValue);
        } else {
            entity.ReplacePhysics(newValue);
        }
    }

    public void RemovePhysics() {
        physicsEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Core.ECS.Components.Physics physics { get { return (Core.ECS.Components.Physics)GetComponent(GameComponentsLookup.Physics); } }
    public bool hasPhysics { get { return HasComponent(GameComponentsLookup.Physics); } }

    public void AddPhysics(Core.Services.IPhysicsService newValue) {
        var index = GameComponentsLookup.Physics;
        var component = (Core.ECS.Components.Physics)CreateComponent(index, typeof(Core.ECS.Components.Physics));
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplacePhysics(Core.Services.IPhysicsService newValue) {
        var index = GameComponentsLookup.Physics;
        var component = (Core.ECS.Components.Physics)CreateComponent(index, typeof(Core.ECS.Components.Physics));
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemovePhysics() {
        RemoveComponent(GameComponentsLookup.Physics);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPhysics;

    public static Entitas.IMatcher<GameEntity> Physics {
        get {
            if (_matcherPhysics == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Physics);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPhysics = matcher;
            }

            return _matcherPhysics;
        }
    }
}
